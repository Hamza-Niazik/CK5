<?php

/**
 * @file
 * Contains uspto_media.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;
use Drupal\file\FileInterface;
use Drupal\media\Entity\Media;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
/**
 * Implements template_preprocess_views_view().
 *
 * {@inheritdoc}
 */
function uspto_media_preprocess_views_view(&$vars) {
  $vars['#cache']['contexts'][] = 'route';
  if ($vars['view']->id() !== 'uspto_media_videos') {
    return;
  }
  $vars['#attached']['library'][] = 'uspto_media/uspto_media.styles';
}

/**
 * Implements hook_form_alter().
 */
function uspto_media_form_media_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['replace_file']['keep_original_filename']['#type'] = 'value';
}

/**
 * Implements hook_file_validate().
 */
function uspto_media_file_validate(FileInterface $file) {
  if (!preg_match('/^[A-Za-z0-9\_\-\.]+$/', $file->getFilename())) {
    return [t("The file you are trying to upload contains spaces or restricted characters. Only alphanumeric, underscore and dash characters are allowed. Please remove spaces or restricted characters and try again.")];
  }

  // Validate the filepath.
  if (!$file->id()) {
    $valid = _uspto_media_file_upload_path_validate($file);
    if (!empty($valid)) {
      return $valid;
    }
  }

  // If file name already exists.
  if (!$file->id()) {
    $file_name = uspto_media_get_current_media_file_name();
    // If the user edits the media file & uploads the file of the same name.
    if ($file_name) {
      if ($file_name == $file->getFilename()) {
        return NULL;
      } else {
        return [t('This is a different filename, the file can only be replaced with the same filename that was removed.')];
      }
    }
  }
}

/**
 * Helper function to throw an error message when a user tries to upload a
 * file for new media and another file with the same filename already exists.
 *
 * @param \Drupal\file\FileInterface $file
 *
 * @return array
 */
function _uspto_media_file_upload_path_validate(FileInterface $file) {
  if (file_exists($file->destination  . $file->getFilename())) {
    return [t('The specified file @filename could not be uploaded. @filename already exists in the system. Please rename the file or edit the existing file in order to replace it in the system.', ['@filename' => $file->getFilename()])];
  }
  // No filename collisions.
  return [];
}

/**
 * Get current media file name.
 */
function uspto_media_get_current_media_file_name() {
  $media = \Drupal::routeMatch()->getParameter('media');
  if ($media instanceof Media && in_array($media->bundle(), [
    'file',
    'image',
  ])) {
    $fields = $media->getFields();
    $media_fields = ['field_media_file', 'field_media_image'];
    foreach ($media_fields as $media_field) {
      if (!empty($fields[$media_field])) {
        $file_id = $fields[$media_field]->first() ? $fields[$media_field]->first()
          ->getValue()['target_id'] : NULL;
        if ($file_id) {
          $file = File::load($file_id);
          if ($file) {
            return $file->getFilename();
          }
        }
      }
    }
  }
  return NULL;
}

/**
 * Implements hook_FORM_ID_form_alter().
 */
function uspto_media_form_media_image_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['field_media_image']['widget'][0]['#upload_validators']['_uspto_media_validate_image_upload'] = [];
}

/**
 * Helper function to check if new file already exists.
 */
function _uspto_media_validate_image_upload(FileInterface $file) {
  $error = [];
  if (file_exists('public://' . $file->getFilename())) {
    $error = [t('The specified file @filename could not be uploaded. @filename already exists in the system. Please rename the file or edit the existing file in order to replace it in the system.', ['@filename' => $file->getFilename()])];
  }
  return $error;
}

/**
 * Implements hook_FORM_ID_form_alter().
 */
function uspto_media_form_media_file_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['field_media_file']['widget'][0]['#upload_validators']['_uspto_media_validate_document_upload'] = [];
}

/**
 * Helper function to check if replacement file already exists.
 */
function _uspto_media_validate_document_upload(FileInterface $file) {
  $error = [];
  if (file_exists('public://documents/' . $file->getFilename())) {
    $error = [t('The specified file @filename could not be uploaded. @filename already exists in the system. Please rename the file or edit the existing file in order to replace it in the system.', ['@filename' => $file->getFilename()])];
  }
  return $error;
}

/**
 * Implements hook_form_alter().
 */
function uspto_media_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Check if the form is the one you want to alter.
  if ($form_id == 'simple_media_bulk_upload_form') {
    // Add a custom validation function to the form.
    $form['#validate'][] = 'uspto_media_form_validation';
  }
}

/**
 * Custom validation function to prevent uploading files with the same name.
 */
function uspto_media_form_validation(array &$form, FormStateInterface $form_state) {
  $uploads = $form_state->getValue(['dropzone', 'uploaded_files']);

  foreach ($uploads as $upload) {
    // Check if the file with the same name already exists.
    $existingFiles = \Drupal::entityTypeManager()->getStorage('file')->loadByProperties(['filename' => $upload['filename']]);
    if (!empty($existingFiles)) {
      $form_state->setErrorByName('dropzone', t('File with the name %name already exists. Please choose a different file.', [
        '%name' => $upload['filename'],
      ]));
    }
  }
}
